

#define SECRET_SSID "MYOGESH"  //Enter WIFI NAME
#define SECRET_PASS "yoga@123"  //Enter WIFI PASSWORD
#define SECRET_DEVICE_KEY "ZPeLKgMU5tgNQAbwYvxpYWDhv"  /





// Code generated by Arduino IoT Cloud, DO NOT EDIT.

#include <ArduinoIoTCloud.h>
#include <Arduino_ConnectionHandler.h>


const char THING_ID[]           = "8156f1fe-7c9a-4c1d-b69a-638676dbb422";
const char DEVICE_LOGIN_NAME[]  = "6e03c2e6-9e69-449c-8e94-47b177aa3c59";

const char SSID[]               = SECRET_SSID;    // Network SSID (name)
const char PASS[]               = SECRET_PASS;    // Network password (use for WPA, or use as key for WEP)
const char DEVICE_KEY[]  = SECRET_DEVICE_KEY;    // Secret device password

void onLight1Change();
void onLight2Change();
void onLight3Change();
void onLight4Change();
void onLight5Change();

CloudSwitch light1;
CloudSwitch light2;
CloudSwitch light3;
CloudSwitch light4;
CloudSwitch light5;

void initProperties(){

  ArduinoCloud.setBoardId(DEVICE_LOGIN_NAME);
  ArduinoCloud.setSecretDeviceKey(DEVICE_KEY);
  ArduinoCloud.setThingId(THING_ID);
  ArduinoCloud.addProperty(light1, READWRITE, ON_CHANGE, onLight1Change);
  ArduinoCloud.addProperty(light2, READWRITE, ON_CHANGE, onLight2Change);
  ArduinoCloud.addProperty(light3, READWRITE, ON_CHANGE, onLight3Change);
  ArduinoCloud.addProperty(light4, READWRITE, ON_CHANGE, onLight4Change);
  ArduinoCloud.addProperty(light5, READWRITE, ON_CHANGE, onLight5Change);

}

WiFiConnectionHandler ArduinoIoTPreferredConnection(SSID, PASS);












// define the GPIO connected with Relays and switches
#define RelayPin1 5  //D1
#define RelayPin2 4  //D2
#define RelayPin3 14 //D5
#define RelayPin4 12 //D6

#define wifiLed   16 //D0


int inputPin = 0;    // D3 choose input pin (for Infrared sensor) 
int VAL = 0; // variable for reading the pin status

int toggleState_1 = 0; //Define integer to remember the toggle state for relay 1
int toggleState_2 = 0; //Define integer to remember the toggle state for relay 2
int toggleState_3 = 0; //Define integer to remember the toggle state for relay 3
int toggleState_4 = 0; //Define integer to remember the toggle state for relay 4

#define TRIG_PIN   2  // D4 The ESP8266 pin D1 connected to Ultrasonic Sensor's TRIG pin
#define ECHO_PIN   13 // D7 The ESP8266 pin D2 connected to Ultrasonic Sensor's ECHO pin

#define DISTANCE_THRESHOLD 15 // centimeters
float duration_us, distance_cm;


void relayOnOff(int relay) {

  switch (relay) {
    case 1:
      if (toggleState_1 == 0) {
        digitalWrite(RelayPin1, LOW); // turn on relay 1
        toggleState_1 = 1;
        Serial.println("Device1 ON");
      }
      else {
        digitalWrite(RelayPin1, HIGH); // turn off relay 1
        toggleState_1 = 0;
        Serial.println("Device1 OFF");
      }
      delay(100);
      break;
    case 2:
      if (toggleState_2 == 0) {
        digitalWrite(RelayPin2, LOW); // turn on relay 2
        toggleState_2 = 1;
        Serial.println("Device2 ON");
      }
      else {
        digitalWrite(RelayPin2, HIGH); // turn off relay 2
        toggleState_2 = 0;
        Serial.println("Device2 OFF");
      }
      delay(100);
      break;
    case 3:
      if (toggleState_3 == 0) {
        digitalWrite(RelayPin3, LOW); // turn on relay 3
        toggleState_3 = 1;
        Serial.println("Device3 ON");
      } else {
        digitalWrite(RelayPin3, HIGH); // turn off relay 3
        toggleState_3 = 0;
        Serial.println("Device3 OFF");
      }
      delay(100);
      break;
    case 4:
      if (toggleState_4 == 0) {
        digitalWrite(RelayPin4, LOW); // turn on relay 4
        toggleState_4 = 1;
        Serial.println("Device4 ON");
      }
      else {
        digitalWrite(RelayPin4, HIGH); // turn off relay 4
        toggleState_4 = 0;
        Serial.println("Device4 OFF");
      }
      delay(100);
      break;
    default : break;
  }
}

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  pinMode(RelayPin1, OUTPUT);
  pinMode(RelayPin2, OUTPUT);
  pinMode(RelayPin3, OUTPUT);
  pinMode(RelayPin4, OUTPUT);

  pinMode(wifiLed, OUTPUT);


  //During Starting all Relays should TURN OFF
  digitalWrite(RelayPin1, HIGH);
  digitalWrite(RelayPin2, HIGH);
  digitalWrite(RelayPin3, HIGH);
  digitalWrite(RelayPin4, HIGH);

  digitalWrite(wifiLed, HIGH);  //Turn OFF WiFi LED

  pinMode(inputPin, INPUT); // declare Infrared sensor as input


  pinMode(TRIG_PIN, OUTPUT); // Configure the ESP8266 pin to the output mode
  pinMode(ECHO_PIN, INPUT);  // Configure the ESP8266 pin to the input mode


  ArduinoCloud.update();
  
  if (WiFi.status() != WL_CONNECTED)
  {
    digitalWrite(wifiLed, HIGH); //Turn OFF WiFi LED
  }
  else{
    digitalWrite(wifiLed, LOW); //Turn ON WiFi LED
  }


}

void loop() {

  ArduinoCloud.update();
  
  if (WiFi.status() != WL_CONNECTED)
  {
    digitalWrite(wifiLed, HIGH); //Turn OFF WiFi LED
  }
  else{
    digitalWrite(wifiLed, LOW); //Turn ON WiFi LED
  }

  


  VAL = digitalRead(inputPin);// read input value 

  if (VAL == HIGH)
  { // check if the input is HIGH
    Serial.println("Object");
    delay(1000);
 
  } 
  else 
  { 
    Serial.println("nO Object");
    delay(1000);
  }


  // Produce a 10-microsecond pulse to the TRIG pin.
  digitalWrite(TRIG_PIN, HIGH);
  delay(1000);
  digitalWrite(TRIG_PIN, LOW);

  // Measure the pulse duration from the ECHO pin
  duration_us = pulseIn(ECHO_PIN, HIGH);
  // calculate the distance
  distance_cm = 0.017 * duration_us;

  Serial.println(distance_cm);


}


void onLight1Change() {
  if ((light1 == 1 && VAL == HIGH  && (distance_cm > 15)) )
  {
    
    analogWrite(RelayPin2, 0);
    analogWrite(RelayPin4, 0);
    analogWrite(RelayPin1, 125);
    analogWrite(RelayPin3, 125);
    Serial.println("RUNNING FORWARD");
    toggleState_1 = 1;
  
    
  }
  else{

    analogWrite(RelayPin1, 0);
    analogWrite(RelayPin2, 0);
    analogWrite(RelayPin3, 0);
    analogWrite(RelayPin4, 0);
    Serial.println("FORWARD STOPPED");
    toggleState_1 = 0;
  }
}

void onLight2Change() {
  if ((light2 == 1 && VAL == HIGH  && (distance_cm > 15)))
  {
    
    analogWrite(RelayPin1, 0);
    analogWrite(RelayPin3, 0);
    analogWrite(RelayPin2, 125);
    analogWrite(RelayPin4, 125);
    Serial.println("RUNNING BACKWARD");
    toggleState_2 = 1;
    delay(5000);
    
    analogWrite(RelayPin1, 0);
    analogWrite(RelayPin2, 0);
    analogWrite(RelayPin3, 0);
    analogWrite(RelayPin4, 0);
    toggleState_2 = 0;
    light2 = 0;
    
  }
  else
  {
    analogWrite(RelayPin2, 0);
    analogWrite(RelayPin4, 0);
    analogWrite(RelayPin1, 0);
    analogWrite(RelayPin3, 0);
    Serial.println("BACKWARD OFF");
    toggleState_2 = 0;
  }
}

void onLight3Change() {
  if ((light3 == 1 && VAL == HIGH  && (distance_cm > 15)))
  {

    analogWrite(RelayPin1, 0);
    analogWrite(RelayPin2, 0);
    analogWrite(RelayPin4, 0);
    analogWrite(RelayPin3, 125);
    Serial.println("TURNING RIGHT");
    toggleState_3 = 1;
    delay(5000);
    
    analogWrite(RelayPin1, 0);
    analogWrite(RelayPin2, 0);
    analogWrite(RelayPin3, 0);
    analogWrite(RelayPin4, 0);
    light3 = 0;
    
  }
  else
  {
    analogWrite(RelayPin3, 0);
    analogWrite(RelayPin1, 0);
    analogWrite(RelayPin2, 0);
    analogWrite(RelayPin4, 0);
    Serial.println("STABILIZING FROM RIGHT TURN");
    toggleState_3 = 0;
  }
}

void onLight4Change() {
  if ((light4 == 1 && VAL == HIGH  && (distance_cm > 15)))
  {
    
    analogWrite(RelayPin4, 0);
    
    analogWrite(RelayPin3, 0);
    analogWrite(RelayPin2, 0);
    analogWrite(RelayPin1, 125);
    Serial.println("TURNING LEFT");
    toggleState_4 = 1;
    delay(5000);
    
    analogWrite(RelayPin1, 0);
    analogWrite(RelayPin2, 0);
    analogWrite(RelayPin3, 0);
    analogWrite(RelayPin4, 0);
    light4 = 0;
  }
  
  else
  {
    analogWrite(RelayPin4, 0);
    
    analogWrite(RelayPin1, 0);
    analogWrite(RelayPin2, 0);
    analogWrite(RelayPin3, 0);
    Serial.println("STABILIZING FROM LEFT TURN");
    toggleState_4 = 0;
  }
}

void onLight5Change() {
  if (light5 == 1)
  {
    
    analogWrite(RelayPin4, 0);
    analogWrite(RelayPin1, 0);
    analogWrite(RelayPin2, 0);
    analogWrite(RelayPin3, 0);
    Serial.println("All OFF");
  }
    
}
